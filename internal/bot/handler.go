package bot

import (
	"2fa-tgbot/internal/config"
	"2fa-tgbot/internal/repository"
	"2fa-tgbot/internal/totp"
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func Start(cfg config.Config) error {

	bot, err := tgbotapi.NewBotAPI(cfg.TelegramToken)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
		return err
	}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		switch update.Message.Command() {
		case "code":

			args := update.Message.CommandArguments()
			parts := strings.Fields(args)

			if len(parts) != 1 {
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID,
					"–§–æ—Ä–º–∞—Ç: /code <—Å–µ—Ä–≤–∏—Å> \n–ü—Ä–∏–º–µ—Ä: /code github"))
				break
			}

			var totpSecret string = ""
			chat := update.Message.Chat
			serviceName := parts[0]

			if chat.IsGroup() || chat.IsSuperGroup() {
				totpSecret, err = repository.FindService(cfg.DBConn, serviceName, update.Message.Chat.ID)
				if err != nil {
					log.Println(err)
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞"))
					continue
				}
			} else {
				if chat.IsPrivate() {
					totpSecret, err = repository.FindService(cfg.DBConn, serviceName, update.Message.From.ID)
					if err != nil {
						log.Println(err)
						bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞"))
						continue
					} else {
						continue
					}
				}
			}

			code, err := totp.GenerateCode(totpSecret)
			if err != nil {
				log.Println(err)
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞"))
				continue
			}
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–∞—à –∫–æ–¥:<pre>"+code+"</pre>")
			msg.ParseMode = "HTML"
			bot.Send(msg)

		case "add":
			args := update.Message.CommandArguments()
			parts := strings.Fields(args)

			if len(parts) != 2 {
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID,
					"–§–æ—Ä–º–∞—Ç: /add <—Å–µ—Ä–≤–∏—Å> <—Å–µ–∫—Ä–µ—Ç>\n–ü—Ä–∏–º–µ—Ä: /add github AAAAABBBBCC"))
				break
			}

			serviceName := parts[0]
			secret := parts[1]

			chat := update.Message.Chat

			if chat.IsGroup() || chat.IsSuperGroup() {
				err = repository.AddService(cfg.DBConn, serviceName, secret, update.Message.Chat.ID)
				if err != nil {
					log.Println(err)
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞"))
					continue
				}
			} else {
				if chat.IsPrivate() {
					err = repository.AddService(cfg.DBConn, serviceName, secret, update.Message.From.ID)
					if err != nil {
						log.Println(err)
						bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞"))
						continue
					}
				} else {
					continue
				}
			}

			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚úÖ –°–µ—Ä–≤–∏—Å "+serviceName+" –¥–æ–±–∞–≤–ª–µ–Ω!")
			bot.Send(msg)

			bot.Request(tgbotapi.DeleteMessageConfig{
				ChatID:    update.Message.Chat.ID,
				MessageID: update.Message.MessageID,
			})

		case "show":
			chat := update.Message.Chat
			var serviceNames []string

			if chat.IsGroup() || chat.IsSuperGroup() {
				serviceNames, err = repository.AllService(cfg.DBConn, update.Message.Chat.ID)
				if err != nil {
					log.Println(err)
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"))
					continue
				}
			} else {
				if chat.IsPrivate() {
					serviceNames, err = repository.AllService(cfg.DBConn, update.Message.From.ID)
					if err != nil {
						log.Println(err)
						bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"))
						continue
					}
				} else {
					continue
				}
			}

			if len(serviceNames) == 0 {
				msg := tgbotapi.NewMessage(chat.ID, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.")
				bot.Send(msg)
				continue
			}

			response := "üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤:\n"
			for _, name := range serviceNames {
				response += "- " + name + "\n"
			}

			msg := tgbotapi.NewMessage(chat.ID, response)
			bot.Send(msg)

		case "delete":
			args := update.Message.CommandArguments()
			parts := strings.Fields(args)

			if len(parts) != 1 {
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID,
					"–§–æ—Ä–º–∞—Ç: /delete <—Å–µ—Ä–≤–∏—Å>\n–ü—Ä–∏–º–µ—Ä: /delete github"))
				break
			}

			serviceName := parts[0]
			chat := update.Message.Chat

			if chat.IsGroup() || chat.IsSuperGroup() {
				err = repository.DeleteService(cfg.DBConn, serviceName, update.Message.Chat.ID)
				if err != nil {
					log.Println(err)
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞"))
					continue
				}
			} else {
				if chat.IsPrivate() {
					err = repository.DeleteService(cfg.DBConn, serviceName, update.Message.From.ID)
					if err != nil {
						log.Println(err)
						bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞"))
						continue
					}
				} else {
					continue
				}
			}

			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –°–µ—Ä–≤–∏—Å "+serviceName+" —É–¥–∞–ª–µ–Ω!")
			bot.Send(msg)

		case "help":
			helpText := "ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n" +
				"/add `<—Å–µ—Ä–≤–∏—Å>` `<—Å–µ–∫—Ä–µ—Ç>` ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Å 2FA (TOTP)\n" +
				"–ü—Ä–∏–º–µ—Ä: `/add github JBSWY3DPEHPK3PXP`\n\n" +
				"/code `<—Å–µ—Ä–≤–∏—Å>` ‚Äì –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞\n" +
				"–ü—Ä–∏–º–µ—Ä: `/code github`\n\n" +
				"/delete `<—Å–µ—Ä–≤–∏—Å>` ‚Äì —É–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å\n" +
				"–ü—Ä–∏–º–µ—Ä: `/delete github`\n\n" +
				"/show ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã\n" +
				"/help ‚Äì –≤—ã–≤–µ—Å—Ç–∏ —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"

			msg := tgbotapi.NewMessage(update.Message.Chat.ID, helpText)
			msg.ParseMode = "Markdown"
			bot.Send(msg)

		default:
			continue
		}
	}

	return nil
}
